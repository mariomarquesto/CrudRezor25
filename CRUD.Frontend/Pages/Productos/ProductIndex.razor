@page "/productos"
@using CRUD.Shared
@using CRUD.Frontend.Services
@inject IRepository Repository
@inject NavigationManager NavigationManager

<h3 class="text-center mt-4">Gestión de Productos</h3>
<div class="d-flex justify-content-end mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormulario">
        <i class="fas fa-plus"></i> Agregar Producto
    </button>
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}


@if (productos is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando productos...</p>
    </div>
}
else if (!productos.Any())
{
    <div class="alert alert-info text-center">No hay productos disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Precio</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (p, index) in productos.Select((p, i) => (p, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@p.Name</td>
                    <td>@p.Description</td>
                    <td>@p.Price.ToString("C")</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarProducto(p)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarProducto(p.Id)">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(productoActual.Id == 0 ? "Agregar Producto" : "Editar Producto")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="productoActual" OnValidSubmit="GuardarProducto">
                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="productoActual.Name" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción:</label>
                            <InputText class="form-control" @bind-Value="productoActual.Description" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Precio:</label>
                            <InputNumber class="form-control" @bind-Value="productoActual.Price" required />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Producto> productos = new();
    private Producto productoActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/productos";
        productos = await Repository.GetAsync<List<Producto>>(url);
    }

    private void MostrarFormulario()
    {
        productoActual = new Producto();
        mostrarFormulario = true;
    }

    private void EditarProducto(Producto producto)
    {
        productoActual = new Producto
        {
            Id = producto.Id,
            Name = producto.Name,
            Description = producto.Description,
            Price = producto.Price
        };
        mostrarFormulario = true;
    }

    private async Task GuardarProducto()
    {
        var url = "api/productos";

        if (productoActual.Id == 0)
        {
            await Repository.PostAsync(url, productoActual);
        }
        else
        {
            await Repository.PutAsync(url, productoActual);
        }

        productos = await Repository.GetAsync<List<Producto>>(url);
        mostrarFormulario = false;
        mensajeAlerta = "Producto guardado exitosamente.";
        mostrarAlerta = true;
    }

    private async Task EliminarProducto(int id)
    {
        var url = "api/productos";
        await Repository.DeleteAsync($"{url}/{id}");

        productos = await Repository.GetAsync<List<Producto>>(url);
        mensajeAlerta = "Producto eliminado exitosamente.";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}